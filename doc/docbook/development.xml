<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN" "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">
<book lang="en">
	<bookinfo>
		<title>Amun development</title>
		<abstract>
			<para>This documentation explains howto start developing on Amun.</para>
		</abstract>
	</bookinfo>

	<chapter>
		<title>Introduction</title>
		<para>This documentation is intended for developers who want start writing their own services
		or want to extend Amun.</para>
	</chapter>

	<chapter id="services">
		<title>Services</title>
		<para>Services are a concept in amun wich can be seen as plugins. Each service has an config.xml
		file wich contains some meta informations about the service, the md5 hash of all files and optional
		sql statments wich will be executed on installation. To provide a basic security each config.xml contains
		also an signature wich is the sha1 hmac hash of the complete xml document using the secret:</para>
		<screen>d6b0c93c6f9b0a7917fdb402298ac692bf25fab8</screen>
		<para>A service can register a listener to the "core.service_install" event in order to extend
		the config.xml vocabular. I.e. if the mail service is installed the config can contain an mail
		template. Installation of the service succeeds only if the signature is valid.</para>
		<sect1>
			<title>API</title>
			<para>In Amun every functionallity is provided via an RESTful API so in order to CRUD (Create, Receive,
			Update, Delete) data you have to define an REST endpoint. All actions such as insert, update and delete 
			data will be handled by amun if the corrosponding data classes exist. Please see the chapter 
			<link linkend="data-handling">data handling</link> for more informations.</para>
		</sect1>
		<sect1>
			<title>Application</title>
			<para>The application is the web-frontend of the service. If a page is loaded the application 
			of the service is called.</para>
		</sect1>
		<sect1>
			<title>Gadget</title>
			<para>Gadgets are normally displayed in a sidebar on the website. A gadget can be loaded via ajax or
			inline.</para>
		</sect1>
	</chapter>

	<chapter id="data-handling">
		<title>Data handling</title>
		<para>If you create a service you should create for each table the following class structure.</para>
		<screen>Vendor/
	News/
		Record.php
		Table.php
		Handler.php
</screen>
		<para>With this structure you can easily create an REST API wich serves the default selection
		of the handler. With the endpoint it is also possible to CRUD record of the table. Note you have
		to implement the setter methods in the record class in order to set values through the API.
		The following sections explain more detailed the responsibilities of each class.</para>
		<sect1>
			<title>Record</title>
			<para>A record represents an row of an table. It must extend the class Amun\Data\RecordAbstract.
			The record is a data object wich is used to create or receive entries from a database. Here an example
			howto create a new record.</para>
			<programlisting role="php"><![CDATA[
$news = DataFactory::get('Vendor_News')->getRecord();
$news->setPageId(1);
$news->setTitle('Foobar');
$news->setText('<p>lorem ipsum</p>');
]]></programlisting>
		</sect1>
		<sect1>
			<title>Table</title>
			<para>The Table class represents an database table. It must extend the class Amun\Sql\TableAbstract.
			It contains all informations about the table what columns are available and how they are connected
			to other tables. The table class is used by the handler to CRUD (Create, Receive, Update and Delete) 
			records on the table. Here an example howto receive a list of Vendor_News records.</para>
			<programlisting role="php"><![CDATA[
$result = DataFactory::get('Vendor_News')
	->select(array('id', 'title', 'url', 'text', 'date'))
	->join(Join::INNER, DataFactory::get('User_Account')
		->select(array('name', 'profileUrl'), 'author')
	)
	->where('pageId', '=', $this->page->id)
	->orderBy('date', Sql::SORT_DESC)
	->getAll(Sql::FETCH_OBJECT);]]></programlisting>
			<para>We use the DataFactory class to get the table class. By default the getAll() method
			returns an associative array. If you use the <constant>Sql::FETCH_OBJECT</constant> constant you will
			get an array of Vendor\News\Record records.</para>
		</sect1>
		<sect1>
			<title>Handler</title>
			<para>The handler class offers some basic selection methods like getAll(), getBy*(), getOneBy*()
			and get() to retrieve records. Each selection method can return either an array or objects. 
			Also it is possible to create, update or delete records. Here some examples howto use a handler
			class.</para>
			<programlisting role="php"><![CDATA[
$handler = DataFactory::get('Vendor_News');

// select row
$row = $handler->getById(1, array('pageId', 'title'));

echo $row['title'];

$object = $handler->getById(1, array('pageId', 'title'), Sql::FETCH_OBJECT);

echo $object->title; // Vendor_News_Record

// select all
$result = $handler->getAll(array('pageId', 'title'))

foreach($result as $row)
{
	echo $row['title'] . "\n";
}

// create record
$news = $handler->getRecord();
$news->setPageId(1);
$news->setTitle('Foobar');
$news->setText('<p>lorem ipsum</p>');

$handler->create($news);
]]></programlisting>
		</sect1>
	</chapter>

	<chapter id="event-handling">
		<title>Event handling</title>
		<para>Services can publish or listen to events. I.e. the lrdd service publishs an "lrdd.resource_discovery"
		event and other services can register to this event in order to anwser an request. The following config entry shows 
		how a service can listen or publish an event</para>
		<screen><![CDATA[
<event>
	<listener name="[EventName]" class="[\Class\Path]" />
	<publisher name="[EventName]" description="[Description]" />
</event>
]]></screen>
	</chapter>

	<chapter>
		<title>Coding standard</title>
		<para></para>
		<sect1>
			<title>PHP</title>
			<para></para>
			<sect2>
				<title>Indenting and line length</title>
				<para>Use leading tabs to ident your code and spaces to format them if necessary. That
				means you should only use tabs to the first sign after that use only spaces. This has
				the advantage that your code is good readable in any editor even if the tabs are
				displayed in different lengths. Here an example how it looks.</para>
				<programlisting role="php"><![CDATA[<?php
function foobar()
{
	$hello = 'foo';
	$bar   = 'world';
}
]]></programlisting>
				<para>We have used one tab to indent each variable. To indent the equal
				sign of $bar to the same width as above we use only white spaces not tabs.
				You should setup your editor that trailing spaces are removed on save and that
				you can see leading tabs and trailing spaces.</para>
			</sect2>
			<sect2>
				<title>Control Structures</title>
				<para>The following examples show you howto format control structures correct.</para>
				<sect3>
					<title>If</title>
					<programlisting role="php"><![CDATA[<?php
if($x !== false || $y >= 0)
{
	echo 'action 1';
}
else
{
	echo 'action 2';
}
]]></programlisting>
				</sect3>
				<sect3>
					<title>Ternary operation</title>
					<programlisting role="php"><![CDATA[<?php
$foo = ($bar > 10) ? true : false;

$bar = ($x < 10) ? '&lt;' : (($x > 10) ? '&gt;' : '=');
]]></programlisting>
				</sect3>
				<sect3>
					<title>Switch</title>
					<programlisting role="php"><![CDATA[<?php
switch($foo)
{
	case 'foo':
		echo 'action 1';
		break;

	default:
		echo 'action 2';
		break;
}
]]></programlisting>
				</sect3>
				<sect3>
					<title>While</title>
					<programlisting role="php"><![CDATA[<?php
$i = 1;

while(true)
{
	if($i > 10)
	{
		break;
	}
	else
	{
		echo 'action ' . $i . "\n";

		$i++;
	}
}
]]></programlisting>
					<programlisting role="php"><![CDATA[<?php
do
{
	echo 'action 1';
}
while(false);
]]></programlisting>
				</sect3>
				<sect3>
					<title>For</title>
					<programlisting role="php"><![CDATA[<?php
for($i = 0; $i < 10; $i++)
{
	echo 'action ' . $i;
}
]]></programlisting>
				</sect3>
			</sect2>
			<sect2>
				<title>Function calls</title>
				<para>The following examples show you howto call functions correct.</para>
				<programlisting role="php"><![CDATA[<?php
$foo = bar($val, $ue);

$bar = $this->foo($an, $oth, $er, null);
]]></programlisting>
			</sect2>
			<sect2>
				<title>Class definitions</title>
				<para>Here an example howto create a class with a proper document block. Note because
				Amun needs PHP > 5.3 you should always define the visibility of the method with
				"public", "protected" or "private".</para>
				<programlisting role="php"><![CDATA[<?php
/**
 * [description]
 *
 * @author  [author_name] <[author_email]>
 * @license [license_url] [license_name]
 * @link    [url]
 */
class index extends Amun_ApplicationAbstract
{
	public function onLoad()
	{
		echo 'some content';
	}
}
]]></programlisting>
			</sect2>
			<sect2>
				<title>SQL queries</title>
				<para>If you make an SQL query you should always use the HEREDOC syntax to
				declare the SQL query. This increases the readability and therefore the code
				is easier to maintain. The following examples shows howto make an proper SQL
				select.</para>
				<programlisting role="php"><![CDATA[<?php
class index extends Amun_ApplicationAbstract
{
	public function onLoad()
	{
		$foos = array();
		$sql  = <<<SQL
SELECT
	bar.id,
	bar.title,
	bar.date
FROM 
	tbl_bar bar
WHERE 
	bar.id > 10
AND 
	bar.id < 100
ORDER BY 
	bar.id DESC
LIMIT 
	0, 10
SQL;

		$result = $this->sql->getAll($sql);

		foreach($result as $row)
		{
			array_push($foos, array(

				'title' => $row['title'],
				'date'  => date('r', $row['date']),

			));
		}
	}
}
]]></programlisting>
			</sect2>
			<sect2>
				<title>E_STRICT-compatible code</title>
				<para>All code should be developed under E_ALL | E_STRICT wich is default if you are
				in debug mode. That means that you code must not produce any error or warning on
				this error level.</para>
			</sect2>
		</sect1>
		<sect1>
			<title>Javascript</title>
			<para>@todo</para>
		</sect1>
		<sect1>
			<title>Template</title>
			<para>@todo</para>
		</sect1>
	</chapter>

	<chapter>
		<title>How setup a development enviroment</title>
		<para>Amun uses other applications to work but all these "3rd party applications" are not included in the
		GIT repositiory. Because of that you have to setup a little development enviroment to start working on Amun. 
		You need A local HTTP server with PHP, a GIT client and a texteditor.</para>
		<sect1>
			<title>Checkout the repository</title>
			<para>First you have to create a folder where you want checkout Amun. This folder should
			be in /var/www folder of your server where it can be accessed via the browser. Goto
			your directoy and checkout the latest version of Amun with:</para>
			<screen>git clone https://github.com/k42b3/amun.git .</screen>
		</sect1>
		<sect1>
			<title>Install dependencies</title>
			<para>Amun uses composer to manage the dependencies. Use the following command to install all
			dependenig libraries</para>
			<screen>composer install</screen>
		</sect1>
		<sect1>
			<title>Install amun</title>
			<para>You should install Amun though the /install.php script. More informations howto install Amun at 
			the manual.</para>
		</sect1>
	</chapter>

	<chapter>
		<title>Hello world service</title>
		<para>This chapter describes step by step howto write a "Hello World" service.</para>
		<sect1>
			<title>File structure</title>
			<para>You have todo is to create a folder in service folder. The folder must have the name of the service. 
			In our example we take "world". In this folder we create a file called "config.xml" and a folder
			application containing a file "index.php". You should now have the following
			structure in your service folder.</para>
			<screen>service /
	world /
		application /
			index.php
		config.xml</screen>
		</sect1>
		<sect1>
			<title>Build config.xml</title>
			<para>Open the file config.xml with you favorite editor and insert the following content.</para>
			<programlisting role="xml"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<service xmlns="http://amun-project.org" signature="">
  <status>normal</status>
  <name>world</name>
  <type>http://ns.amun-project.org/2011/amun/service/world</type>
  <link>http://phpsx.org</link>
  <author>Your Name</author>
  <license>GPLv3</license>
  <version>0.0.1</version>
  <permissions>
    <perm name="view" description="World View"/>
  </permissions>
</service>]]></programlisting>
			<para>These are the basic informations about your service wich will be inserted
			into the service table. Each service should have at least one view right.
			If the user has the right the page is shown in the navigation else not.</para>
		</sect1>
		<sect1>
			<title>Start coding</title>
			<para>Now open the file application/index.php and write the following code to it</para>
			<programlisting role="php"><![CDATA[<?php

use Amun\Exception;
use Amun\Module\ApplicationAbstract;

class index extends ApplicationAbstract
{
	public function onLoad()
	{
		if($this->user->hasRight('world_view'))
		{
			echo '<h1>Hello World</h1>';
		}
		else
		{
			throw new Exception('Access denied');
		}
	}
}
]]></programlisting>
			<para>Each file of a service wich you want access must have a class wich has the same
			name as the file. The output wich is generated by the class will be inserted into the
			template. We first check whether the user has the right to view the template if
			yes we output "Hello World" else we show an message that the user has not the right to
			view it.</para>
		</sect1>
		<sect1>
			<title>Installation</title>
			<para>To install the service goto the backend and select the option System / Service.
			Select the "world" service and install it. If the service was installed successful
			you can create a new page at Content / Page wich uses the "world" service. Now you have
			to set the rights in your user group. Goto User / Group and select the user group
			wich you want give the right to view this application. If anything works you should
			now see the service at the frontend.</para>
		</sect1>
	</chapter>

	<chapter>
		<title>API</title>
		<para>Amun uses Oauth to access the API. The following examples show the workflow howto
		grant an application access.</para>
		<sect1>
			<title>Overview</title>
			<para>To connect through the API you need an API key and secret. In the administrator section
			you can create a new API consumer under System / Api. In Amun we have the followign endpoints:</para>
			<orderedlist numeration="upperroman">
			<title>OAuth endpoints</title>
			<listitem>
				<para>Request Token:</para>
				<para>[psx_url]/index.php/api/oauth/endpoint/request</para>
			</listitem>
			<listitem>
				<para>Authorize:</para>
				<para>[psx_url]/index.php/api/oauth/endpoint/authorization</para>
			</listitem>
			<listitem>
				<para>Access Token:</para>
				<para>[psx_url]/index.php/api/oauth/endpoint/access</para>
			</listitem>
			</orderedlist>
			<para>If you have an consumer key and secret you can connect to the API like defined in the
			<ulink url="http://tools.ietf.org/html/rfc5849">OAuth specification</ulink>.</para>
		</sect1>
		<sect1>
			<title>Workflow</title>
			<para>If its not other mentioned this implementation follows the specification of OAuth 1.0.
			This section describes how you can access a protected resource via the API. Note for
			better reading I have break long lines. If a line is indented with one space it was broken by the
			line above and should be seen as it where in the same line. If you need a oauth consumer
			implementation take a look at the PSX framework (http://phpsx.org) and see the oauth library.</para>
			<sect2>
				<title>Request Token</title>
				<para>The web application requests an request token.</para>
				<programlisting><![CDATA[GET /index.php/api/oauth/endpoint/request HTTP/1.1
Host: 127.0.0.1
Authorization: OAuth,
 oauth_consumer_key="[key]",
 oauth_signature_method="HMAC-SHA1",
 oauth_signature="[signature]",
 oauth_timestamp="[timestamp]",
 oauth_nonce="[nonce]",
 oauth_version="1.0"]]></programlisting>
			</sect2>
			<sect2>
				<title>Responds Unauthorized Request Token</title>
				<para>On success Amun respond with an token and token secret. Note you can request max
				5 valid tokens per IP.</para>
				<programlisting><![CDATA[HTTP/1.1 200 OK

oauth_token=[token]&
oauth_token_secret=[token_secret]&
oauth_callback_confirmed=true&
x_oauth_expire=[expire]]]></programlisting>
			</sect2>
			<sect2>
				<title>Redirect user to Amun</title>
				<para>Your application should now redirect the user to Amun to authorize the request token.
				You must use the obtained request token in your request</para>
				<programlisting><![CDATA[GET /api/oauth/endpoint/authorization?oauth_token=[token] HTTP/1.1
Host: 127.0.0.1]]></programlisting>
			</sect2>
			<sect2>
				<title>Logs in and grant / deny request</title>
				<para>The user must login and "Allow" or "Deny" the request for the web application. It is
				also possible to allow the application only a specific subset of the rights from the user.</para>
			</sect2>
			<sect2>
				<title>Redirect with authorized request token</title>
				<para>If the user has "Allow" or "Deny" the request Amun redirects the user back to the callback.
				Note the callback must be from the same host as the url defined in the backend. If the request
				was denied the GET variable x_oauth_error is set.</para>
				<programlisting><![CDATA[Accepted:
GET [callback]?oauth_token=[token]&oauth_verifier=[verifier] HTTP/1.1

Denied:
GET [callback]?x_oauth_error=[msg] HTTP/1.1]]></programlisting>
			</sect2>
			<sect2>
				<title>Request an access token</title>
				<para>Now we have all informations to get an access token. Note the expire time of your request
				token must be valid to exchange the token.</para>
				<programlisting><![CDATA[GET /index.php/api/oauth/endpoint/access HTTP/1.1
Host: 127.0.0.1
Authorization: OAuth,
 oauth_consumer_key="[key]",
 oauth_token="[token]",
 oauth_signature_method="HMAC-SHA1",
 oauth_signature="[signature]",
 oauth_timestamp="[timestamp]",
 oauth_nonce="[nonce]",
 oauth_version="1.0",
 oauth_verifier="[verifier]"]]></programlisting>
			</sect2>
			<sect2>
				<title>Responds Access Token</title>
				<para>If all parameters are valid Amun respond with an access token and secret. You can use
				the token [expire] seconds to access the API.</para>
				<programlisting><![CDATA[HTTP/1.1 200 OK

oauth_token=[token]&oauth_token_secret=[token_secret]&x_oauth_expire=[expire]]]></programlisting>
			</sect2>
			<sect2>
				<title>Request data with Access Token</title>
				<para>Here an example how you can access the API with an access token</para>
				<programlisting><![CDATA[GET /index.php/api/news HTTP/1.1
Host: 127.0.0.1
Accept: application/xml
Authorization: OAuth,
 oauth_consumer_key="[key]",
 oauth_token="[token]",
 oauth_signature_method="HMAC-SHA1",
 oauth_signature="[signature]",
 oauth_timestamp="[timestamp]",
 oauth_nonce="[nonce]",
 oauth_version="1.0"]]></programlisting>
			</sect2>
			<sect2>
				<title>Response with data</title>
				<para>We get the latest entries from the news service</para>
				<programlisting><![CDATA[HTTP/1.1 200 OK

<resultset>
	<startIndex>1</startIndex>
	<itemsPerPage>1</itemsPerPage>
	<totalResults>1</totalResults>
	<entry>
		<id>1</id>
		<user>foo</user>
		<title>some headline</title>
		<text>and here a really great description</text>
		<date>Mon, 16 Nov 2009 12:56:11 +0100</date>
	</entry>
</resultset>]]></programlisting>
			</sect2>
			<sect2>
				<title>Defined types</title>
				<para>In the description we use variables like [key] etc. In this section all variable are explained.</para>
				<sect3>
					<title>Key</title>
					<para>This is the public consumer key of the user. You get an consumer key and secret if you register
					an new application at the backend at System / Api. You can also take a look at the "amun_oauth" table.</para>
				</sect3>
				<sect3>
					<title>Token / Token secret</title>
					<para>You get the token and token secret as response from an request to the "request token" endpoint.
					This is usually http://[host]/index.php/api/oauth/endpoint/request. The value is a string
					with random hex characters. The string is 40 signs long i.e. 0864dc856a34e4590125836e4151d521</para>
				</sect3>
				<sect3>
					<title>Signature</title>
					<para>The signature is for verifing the request. Amun follows the specification except that
					you use as Normalize Request Parameters (http://oauth.net/core/1.0a#sig_norm_param) only the
					OAuth header parameters. More informations about signing a request at
					http://oauth.net/core/1.0a#signing_process</para>
				</sect3>
				<sect3>
					<title>Timestamp</title>
					<para>The timestamp is expressed in the number of seconds since January 1, 1970 00:00:00 GMT
					i.e. 1258369873</para>
				</sect3>
				<sect3>
					<title>Nonce</title>
					<para>The nonce is a string with random hex characters. The string must be 16 signs long
					i.e. d4a35e7181e370e4</para>
				</sect3>
				<sect3>
					<title>Verifier</title>
					<para>The verfier is to get sure that only application can request an access token that have
					previously gets user authorization. The value is a string with random hex characters. The string
					is 32 signs long i.e. dc66d622d793e0af0e3bcc639fecbb65</para>
				</sect3>
				<sect3>
					<title>Expire</title>
					<para>The seconds howlong you can use a token. I.e. if you obtain a request token and x_oauth_expire
					is 900 you have 15 minutes to exchange your request token for an access token.</para>
				</sect3>
				<sect3>
					<title>Callback</title>
					<para>The callback is defined either at registration or when you obtain an request token (with the
					oauth_callback parameter). If both are present amun uses the callback from the request token.
					Note the callback must have the same host as the web application url defined on registration.</para>
				</sect3>
			</sect2>
		</sect1>
		<sect1>
			<title>Security</title>
			<para>When you use the API you should keep in mind that you can never trust an API user. This
			is because you cant get sure that the key and secret is used only by the trusted user. In example
			if the user uses the API key and secret in an desktop application someone can sniff the key and
			secret or if the user uses the API key and secret in an javascript application. There are many
			possibilities how someone can get the API key and secret of a user. The conclusion should be that
			the assigend user to the API should only have the rights wich are necessary. If you allow a user to
			Create Update or Delete data you must get sure that this user is reliable because else someone can
			create automatic scripts that delete all data or insert spam.</para>
		</sect1>
	</chapter>

	<glossary>
		<para>This glossary contains additional related specifications.</para>
		<glossdiv>
			<title>A</title>
			<glossentry>
				<glossterm>Activity Streams</glossterm>
				<glossdef>
					<para>http://activitystrea.ms/specs/</para>
				</glossdef>
			</glossentry>
			<glossentry>
				<glossterm>ATOM</glossterm>
				<glossdef>
					<para>http://tools.ietf.org/html/rfc4287</para>
				</glossdef>
			</glossentry>
		</glossdiv>
		<glossdiv>
			<title>C</title>
			<glossentry>
				<glossterm>CMIS</glossterm>
				<glossdef>
					<para>http://www.oasis-open.org/committees/tc_home.php?wg_abbrev=cmis</para>
				</glossdef>
			</glossentry>
		</glossdiv>
		<glossdiv>
			<title>F</title>
			<glossentry>
				<glossterm>FOAF</glossterm>
				<glossdef>
					<para>http://xmlns.com/foaf/spec/</para>
				</glossdef>
			</glossentry>
		</glossdiv>
		<glossdiv>
			<title>H</title>
			<glossentry>
				<glossterm>Host Metadata</glossterm>
				<glossdef>
					<para>http://tools.ietf.org/html/draft-hammer-hostmeta-16</para>
				</glossdef>
			</glossentry>
			<glossentry>
				<glossterm>HTTP</glossterm>
				<glossdef>
					<para>http://tools.ietf.org/html/rfc2616</para>
				</glossdef>
			</glossentry>
			<glossentry>
				<glossterm>HTML5</glossterm>
				<glossdef>
					<para>http://www.w3.org/TR/html5/</para>
				</glossdef>
			</glossentry>
		</glossdiv>
		<glossdiv>
			<title>J</title>
			<glossentry>
				<glossterm>Javascript</glossterm>
				<glossdef>
					<para>http://www.ecma-international.org/publications/standards/Ecma-262.htm</para>
				</glossdef>
			</glossentry>
		</glossdiv>
		<glossdiv>
			<title>L</title>
			<glossentry>
				<glossterm>LRDD</glossterm>
				<glossdef>
					<para>http://tools.ietf.org/html/draft-hammer-discovery-05</para>
				</glossdef>
			</glossentry>
		</glossdiv>
		<glossdiv>
			<title>M</title>
			<glossentry>
				<glossterm>MySQL</glossterm>
				<glossdef>
					<para>http://dev.mysql.com/doc/</para>
				</glossdef>
			</glossentry>
		</glossdiv>
		<glossdiv>
			<title>O</title>
			<glossentry>
				<glossterm>OAuth</glossterm>
				<glossdef>
					<para>http://tools.ietf.org/html/rfc5849</para>
				</glossdef>
			</glossentry>
			<glossentry>
				<glossterm>OpenID</glossterm>
				<glossdef>
					<para>http://openid.net/specs/openid-authentication-2_0.html</para>
				</glossdef>
			</glossentry>
			<glossentry>
				<glossterm>OpenSocial</glossterm>
				<glossdef>
					<para>http://www.opensocial.org/Technical-Resources/</para>
				</glossdef>
			</glossentry>
			<glossentry>
				<glossterm>OpenSearch</glossterm>
				<glossdef>
					<para>http://www.opensearch.org/Specifications/OpenSearch/1.1/Draft_4</para>
				</glossdef>
			</glossentry>
		</glossdiv>
		<glossdiv>
			<title>P</title>
			<glossentry>
				<glossterm>PHP</glossterm>
				<glossdef>
					<para>http://www.php.net/manual/en/</para>
				</glossdef>
			</glossentry>
			<glossentry>
				<glossterm>Portable Contacts</glossterm>
				<glossdef>
					<para>http://portablecontacts.net/draft-spec.html</para>
				</glossdef>
			</glossentry>
			<glossentry>
				<glossterm>PSX</glossterm>
				<glossdef>
					<para>http://phpsx.org</para>
				</glossdef>
			</glossentry>
		</glossdiv>
		<glossdiv>
			<title>R</title>
			<glossentry>
				<glossterm>RSS</glossterm>
				<glossdef>
					<para>http://www.rssboard.org/rss-specification</para>
				</glossdef>
			</glossentry>
		</glossdiv>
		<glossdiv>
			<title>W</title>
			<glossentry>
				<glossterm>WebFinger</glossterm>
				<glossdef>
					<para>http://code.google.com/p/webfinger/</para>
				</glossdef>
			</glossentry>
		</glossdiv>
		<glossdiv>
			<title>X</title>
			<glossentry>
				<glossterm>XML</glossterm>
				<glossdef>
					<para>http://www.w3.org/TR/xml/</para>
				</glossdef>
			</glossentry>
		</glossdiv>
	</glossary>

</book>
